[{"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/index.js":"1","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/App.js":"2","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/reportWebVitals.js":"3","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Home.js":"4","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Login.js":"5","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Header.js":"6","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Logout.js":"7","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Signup.js":"8","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/Posts.js":"9","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/BrowseSub.js":"10","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/CreatePostSub.js":"11","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/SinglePost.js":"12","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/handleError.js":"13","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/handleClick.js":"14","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/changePost.js":"15","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/handleReadPost.js":"16"},{"size":449,"mtime":1613171442178,"results":"17","hashOfConfig":"18"},{"size":1163,"mtime":1613298472032,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1612319758030,"results":"20","hashOfConfig":"18"},{"size":2654,"mtime":1613277817845,"results":"21","hashOfConfig":"18"},{"size":2982,"mtime":1613278292883,"results":"22","hashOfConfig":"18"},{"size":4102,"mtime":1613289884953,"results":"23","hashOfConfig":"18"},{"size":1082,"mtime":1613278170597,"results":"24","hashOfConfig":"18"},{"size":2378,"mtime":1613278201361,"results":"25","hashOfConfig":"18"},{"size":4200,"mtime":1613289670874,"results":"26","hashOfConfig":"18"},{"size":1127,"mtime":1613286256115,"results":"27","hashOfConfig":"18"},{"size":577,"mtime":1613277635857,"results":"28","hashOfConfig":"18"},{"size":6816,"mtime":1613299551041,"results":"29","hashOfConfig":"18"},{"size":199,"mtime":1613284150670,"results":"30","hashOfConfig":"18"},{"size":2815,"mtime":1613284141789,"results":"31","hashOfConfig":"18"},{"size":410,"mtime":1613284136601,"results":"32","hashOfConfig":"18"},{"size":699,"mtime":1613284146741,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"122p5wg",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/index.js",[],["75","76"],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/App.js",[],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/reportWebVitals.js",[],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Home.js",["77","78","79","80","81"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Header from './Header';\nimport BrowseSub from '../Body/BrowseSub.js';\nimport CreatePostSub from '../Body/CreatePostSub.js';\nimport Posts from '../Body/Posts.js';\nimport SinglePost from '../Body/SinglePost';\n\nimport './Home.css';\nconst Home = props => {\n  const { location, history } = props;\n  const [posts, setPosts] = useState([]);\n  const [login, isLogin] = useState(false);\n  const [logout, isLogout] = useState(false);\n  useEffect(() => {\n    fetch('/api/posts')\n      .then(response => response.json())\n      .then(data => setPosts(data));\n    if (\n      location.state !== undefined &&\n      location.state.login === true &&\n      location.state.expiresAt <= Date.now()\n    ) {\n      fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          refreshToken: location.state.refreshToken,\n          username: location.state.username\n        })\n      })\n        .then(response => {\n          if (response.ok) {\n            history.push({\n              pathname: '/',\n              state: {\n                login: false,\n                logout: true,\n                authenticationToken: '',\n                refreshToken: '',\n                expiresAt: '',\n                username: ''\n              }\n            });\n          } else {\n            history.push('/');\n          }\n        })\n        .catch(error => {\n          console.log('There was an error!', error);\n        });\n    }\n    if (location.state !== undefined) {\n      if (location.state.login === true) {\n        isLogin(true);\n      }\n      if (location.state.logout === true) {\n        isLogout(true);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      isLogin(false);\n    }, 1500);\n    return () => clearTimeout(timer);\n  }, [login]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      isLogout(false);\n    }, 1500);\n    return () => clearTimeout(timer);\n  }, [logout]);\n\n  return (\n    <div className='container'>\n      {login === true && <h3 className='error'>Logged In</h3>}\n      {logout === true && <h3 className='error'>Logged Out</h3>}\n      <div className='posts-container'>\n        <Posts posts={posts} />\n      </div>\n      <div className='side-container'>\n        <div className='create-post-subreddit'>\n          <CreatePostSub posts={posts} />\n        </div>\n        <div className='browse-subreddit'>\n          <BrowseSub posts={posts} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Login.js",["82","83","84","85"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst Login = props => {\n  const { history, location } = props;\n  const user = {\n    username: '',\n    password: ''\n  };\n\n  const [loginInfo, changeLoginInfo] = useState(user);\n  const [flag, setFlag] = useState(1);\n  const handleChange = e => {\n    e.preventDefault();\n    const username = e.target.name;\n    const value = e.target.value;\n    changeLoginInfo({ ...loginInfo, [username]: value });\n  };\n\n  const handleLogin = data => {\n    history.push({\n      pathname: '/',\n      state: {\n        login: true,\n        logout: false,\n        authenticationToken: data.authenticationToken,\n        refreshToken: data.refreshToken,\n        expiresAt: data.expiresAt,\n        username: data.username\n      }\n    });\n  };\n\n  const submitLogin = event => {\n    event.preventDefault();\n\n    fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        username: loginInfo.username,\n        password: loginInfo.password\n      })\n    })\n      .then(async response => {\n        const data = await response.json();\n        if (response.ok) {\n          handleLogin(data);\n        } else {\n          setFlag(-1);\n          history.push('/login');\n        }\n      })\n      .catch(error => {\n        this.setError({ errorMessage: error.toString() });\n        console.log('there was an error!', error);\n      });\n  };\n\n  return (\n    <>\n      {flag === -1 && (\n        <h3 style={{ color: 'red' }}>Username/Password incorrect</h3>\n      )}\n      <div className='panel-heading'>\n        <div className='panel-title'>Sign In</div>\n      </div>\n      <form onSubmit={submitLogin}>\n        <div style={{ marginBottom: 25 }} className='input-group'>\n          <span className='input-group-addon'>\n            <i className='glyphicon glyphicon-user'></i>\n          </span>\n          <input\n            type='text'\n            name='username'\n            placeholder='username'\n            className='form-control'\n            value={loginInfo.username}\n            required={true}\n            onChange={handleChange}\n          />\n        </div>\n        <div style={{ marginBottom: 25 }} className='input-group'>\n          <span className='input-group-addon'>\n            <i className='glyphicon glyphicon-lock'></i>\n          </span>\n          <input\n            type='password'\n            name='password'\n            placeholder='password'\n            className='form-control'\n            value={loginInfo.password}\n            required={true}\n            onChange={handleChange}\n          />\n        </div>\n        <div style={{ marginTop: 10 }} className='form-group'>\n          <div className='col-sm-6 controls'>\n            <button type='submit' className='btn btn-success'>\n              Login\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Header.js",[],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Logout.js",["86","87","88","89"],"import react, { useState, useEffect } from 'react';\nimport { useHistory, useLocation, Redirect } from 'react-router-dom';\nconst Logout = () => {\n  let history = useHistory();\n  let location = useLocation();\n  const { refreshToken, username } = location.state.authentication;\n  //useEffect(() => {\n  useEffect(() => {\n    fetch('/api/auth/logout', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        refreshToken: refreshToken,\n        username: username\n      })\n    })\n      .then(response => {\n        if (response.ok) {\n          history.push({\n            pathname: '/',\n            state: {\n              login: false,\n              logout: true,\n              authenticationToken: '',\n              refreshToken: '',\n              expiresAt: '',\n              username: ''\n            }\n          });\n        } else {\n          history.push('/');\n        }\n      })\n      .catch(error => {\n        console.log('There was an error!', error);\n      });\n  }, []);\n\n  //});\n  return null;\n};\n\nexport default Logout;\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Route/Signup.js",[],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/Posts.js",["90"],"import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useLocation, useHistory, withRouter } from 'react-router-dom';\nimport { changePost } from '../HandleEvent/changePost.js';\nimport { handleError } from '../HandleEvent/handleError.js';\nimport { handleClick } from '../HandleEvent/handleClick.js';\nimport { handleReadPost } from '../HandleEvent/handleReadPost.js';\n\nimport './Posts.css';\nimport '../Route/Header.css';\nconst Posts = props => {\n  const [posts, setPosts] = useState(props.posts);\n\n  useEffect(() => {\n    setPosts(props.posts);\n  }, [props]);\n\n  return (\n    <div>\n      {posts.map(singlePost => {\n        return (\n          <EachPost\n            key={singlePost.postId}\n            singlePost={singlePost}\n            posts={posts}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst EachPost = React.memo(props => {\n  const [eachPost, setEachPost] = useState({});\n  const [showColorUpVote, isShowColorUpVote] = useState(false);\n  const [showColorDownVote, isShowColorDownVote] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  let history = useHistory();\n  let location = useLocation();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setError(false);\n    }, 1500);\n    return () => clearTimeout(timer);\n  }, [error]);\n\n  useEffect(() => {\n    setEachPost(props.singlePost);\n    if (props.singlePost.upVote === false) {\n      isShowColorUpVote(false);\n    } else {\n      isShowColorUpVote(true);\n    }\n    if (props.singlePost.downVote === false) {\n      isShowColorDownVote(false);\n    } else {\n      isShowColorDownVote(true);\n    }\n  }, []);\n\n  return (\n    <div className='post-container'>\n      {error && <h2 className='error'>{errorMessage}</h2>}\n      <div className='left-post'>\n        <div className='vote'>\n          <FontAwesomeIcon\n            icon='arrow-up'\n            className='arrowUp'\n            color={showColorUpVote === true ? 'green' : 'black'}\n            onClick={() =>\n              handleClick(\n                'UPVOTE',\n                setEachPost,\n                location,\n                eachPost,\n                changePost,\n                showColorDownVote,\n                showColorUpVote,\n                isShowColorDownVote,\n                isShowColorUpVote,\n                handleError,\n                setError,\n                setErrorMessage\n              )\n            }\n          />\n          <span>{eachPost.voteCount}</span>\n          <FontAwesomeIcon\n            icon='arrow-down'\n            className='arrowDown'\n            color={showColorDownVote === true ? 'red' : 'black'}\n            onClick={() =>\n              handleClick(\n                'DOWNVOTE',\n                setEachPost,\n                location,\n                eachPost,\n                changePost,\n                showColorDownVote,\n                showColorUpVote,\n                isShowColorDownVote,\n                isShowColorUpVote,\n                handleError,\n                setError,\n                setErrorMessage\n              )\n            }\n          />\n        </div>\n      </div>\n      <div className='right-post'>\n        <div className='top'>\n          <h5>/subReddit/{eachPost.subRedditName}</h5>\n          <p className='duration'>\n            Posted by {eachPost.username} {eachPost.duration}\n          </p>\n        </div>\n        <div className='post-body'>\n          <h2>{eachPost.postName}</h2>\n          <p style={{ color: '#39434a', fontSize: 14 }}>\n            {eachPost.description}\n          </p>\n        </div>\n        <div className='bottom'>\n          <p>Comments({eachPost.commentCount})</p>\n          <button\n            onClick={() =>\n              handleReadPost(\n                location,\n                history,\n                handleError,\n                setError,\n                setErrorMessage,\n                eachPost,\n                props.posts\n              )\n            }\n            className='readPost'\n          >\n            Read Post\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default withRouter(Posts);\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/BrowseSub.js",[],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/CreatePostSub.js",[],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/Body/SinglePost.js",["91"],"/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/handleError.js",["92"],"import React from 'react';\n\nexport const handleError = (errorStatus, setError, setErrorMessage) => {\n  if (errorStatus !== 200) {\n    setError(true);\n    setErrorMessage('Login is required');\n  }\n};\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/handleClick.js",["93"],"import React from 'react';\n\nexport const handleClick = (\n  arrow,\n  setEachPost,\n  location,\n  eachPost,\n  changePost,\n  showColorDownVote,\n  showColorUpVote,\n  isShowColorDownVote,\n  isShowColorUpVote,\n  handleError,\n  setError,\n  setErrorMessage\n) => {\n  if (location !== undefined && location.state !== undefined) {\n    return fetch('/api/votes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + location.state.authenticationToken\n      },\n      body: JSON.stringify({\n        postId: eachPost.postId,\n        voteType: arrow\n      })\n    })\n      .then(response => {\n        if (response.ok) {\n          console.log('Childcomponent: upVote: ' + eachPost.upVote);\n          console.log('Childcomponent: downVote: ' + eachPost.downVote);\n          console.log('Childcomponent: count: ' + eachPost.voteCount);\n          let tempVoteCount = eachPost.voteCount;\n          let tempPost = { ...eachPost };\n          if (eachPost.upVote === false && eachPost.downVote === false) {\n            if (arrow === 'UPVOTE') {\n              tempPost.upVote = true;\n              tempPost.downVote = false;\n              tempPost.voteCount = ++tempVoteCount;\n            } else {\n              tempPost.upVote = false;\n              tempPost.downVote = true;\n              tempPost.voteCount = --tempVoteCount;\n            }\n          } else {\n            if (arrow === 'UPVOTE' && eachPost.upVote === true) {\n              tempPost.upVote = false;\n              tempPost.downVote = false;\n              tempPost.voteCount = --tempVoteCount;\n            } else if (arrow === 'DOWNVOTE' && eachPost.downVote === true) {\n              tempPost.upVote = false;\n              tempPost.downVote = false;\n              tempPost.voteCount = ++tempVoteCount;\n            } else {\n              if (arrow === 'UPVOTE') {\n                ++tempVoteCount;\n\n                tempPost.upVote = true;\n                tempPost.downVote = false;\n                tempPost.voteCount = ++tempVoteCount;\n              } else {\n                --tempVoteCount;\n\n                tempPost.upVote = false;\n                tempPost.downVote = true;\n                tempPost.voteCount = --tempVoteCount;\n              }\n            }\n          }\n          //changePost(tempVote, arrow);\n\n          changePost(\n            tempPost,\n            arrow,\n            setEachPost,\n            showColorDownVote,\n            showColorUpVote,\n            isShowColorDownVote,\n            isShowColorUpVote\n          );\n        } else {\n          console.log(response.status);\n          handleError(response.status, setError, setErrorMessage);\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  } else {\n    handleError(500, setError, setErrorMessage);\n  }\n};\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/changePost.js",["94"],"import React from 'react';\n\nexport const changePost = (\n  tempPost,\n  arrow,\n  setEachPost,\n  showColorDownVote,\n  showColorUpVote,\n  isShowColorDownVote,\n  isShowColorUpVote\n) => {\n  setEachPost({ ...tempPost });\n  if (arrow === 'DOWNVOTE') {\n    isShowColorDownVote(!showColorDownVote);\n    isShowColorUpVote(false);\n  } else {\n    isShowColorUpVote(!showColorUpVote);\n    isShowColorDownVote(false);\n  }\n};\n","/Users/truongquanghai/Documents/redditclone final/reddit-clone/src/HandleEvent/handleReadPost.js",["95"],"import React from 'react';\n\nexport const handleReadPost = (\n  location,\n  history,\n  handleError,\n  setError,\n  setErrorMessage,\n  eachPost,\n  posts\n) => {\n  if (\n    location !== undefined &&\n    location.state !== undefined &&\n    location.state.login === true\n  ) {\n    history.push({\n      pathname: `/post/${eachPost.postId}`,\n      state: {\n        authenticationToken: location.state.authenticationToken,\n        expiresAt: location.state.expiresAt,\n        login: true,\n        logout: false,\n        refreshToken: location.state.refreshToken,\n        username: location.state.username,\n        posts: posts\n      }\n    });\n  } else {\n    handleError(500, setError, setErrorMessage);\n  }\n};\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":38,"nodeType":"102","messageId":"103","endLine":1,"endColumn":49},{"ruleId":"100","severity":1,"message":"104","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":21},{"ruleId":"100","severity":1,"message":"105","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"100","severity":1,"message":"106","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":18},{"ruleId":"107","severity":1,"message":"108","line":61,"column":6,"nodeType":"109","endLine":61,"endColumn":8,"suggestions":"110"},{"ruleId":"100","severity":1,"message":"111","line":1,"column":27,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"112","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":20},{"ruleId":"100","severity":1,"message":"104","line":2,"column":22,"nodeType":"102","messageId":"103","endLine":2,"endColumn":33},{"ruleId":"100","severity":1,"message":"113","line":5,"column":20,"nodeType":"102","messageId":"103","endLine":5,"endColumn":28},{"ruleId":"100","severity":1,"message":"114","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"115","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"116","line":2,"column":35,"nodeType":"102","messageId":"103","endLine":2,"endColumn":43},{"ruleId":"107","severity":1,"message":"117","line":37,"column":6,"nodeType":"109","endLine":37,"endColumn":8,"suggestions":"118"},{"ruleId":"107","severity":1,"message":"119","line":62,"column":6,"nodeType":"109","endLine":62,"endColumn":8,"suggestions":"120"},{"ruleId":"107","severity":1,"message":"121","line":92,"column":6,"nodeType":"109","endLine":92,"endColumn":8,"suggestions":"122"},{"ruleId":"100","severity":1,"message":"123","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"123","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"123","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"123","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":13},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'Header' is defined but never used.","'SinglePost' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'location.state'. Either include them or remove the dependency array.","ArrayExpression",["126"],"'useEffect' is defined but never used.","'useHistory' is defined but never used.","'location' is assigned a value but never used.","'react' is defined but never used.","'useState' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'refreshToken', and 'username'. Either include them or remove the dependency array.",["127"],"React Hook useEffect has a missing dependency: 'props.singlePost'. Either include it or remove the dependency array. If 'setEachPost' needs the current value of 'props.singlePost', you can also switch to useReducer instead of useState and read 'props.singlePost' in the reducer.",["128"],"React Hook useEffect has missing dependencies: 'history', 'id', and 'location'. Either include them or remove the dependency array.",["129"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [history, location.state]",{"range":"138","text":"139"},"Update the dependencies array to be: [history, refreshToken, username]",{"range":"140","text":"141"},"Update the dependencies array to be: [props.singlePost]",{"range":"142","text":"143"},"Update the dependencies array to be: [history, id, location]",{"range":"144","text":"145"},[1802,1804],"[history, location.state]",[1026,1028],"[history, refreshToken, username]",[1726,1728],"[props.singlePost]",[3075,3077],"[history, id, location]"]